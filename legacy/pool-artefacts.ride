{-# STDLIB_VERSION 6 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}
{-# IMPORT artifacts/mainnet.ride #-}


let puzzleAssetId = base58'HEB8Qaw9xrWpWs8tHsiATYGBWDBtP2S7kcPALrMu43AS'
let usdnAssetId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
let puzzlePoolAddress = base58'3PFDgzu1UtswAkCMxqqQjbTeHaX4cMab8Kh'
let nftCreationAddress = base58'3PFQjjDMiZKQZdu5JqTHD7HwgSXyp9Rw9By'
let eagleHolderAddress = base58'3PKUxbZaSYfsR7wu2HaAgiirHYwAMupDrYW'
let artefacts = [["Puzzle Surf", "Puzzle Surf artefact can be used to launch a custom pool on Puzzle Swap (PuzzleSwap.org).", "https://ipfs.io/ipfs/QmUawQhPVhPitBSRtgd6ZKurseYJ3QWYUhYmV23PS2qL4Y"], ["Puzzle Desert", "Puzzle Desert artefact can be used to launch a custom pool on Puzzle Swap (PuzzleSwap.org).", "https://ipfs.io/ipfs/Qma7Beh9pPkRhgK6WNMQKLHahQDKeKRp5myjv2mx1zv1zm"], ["Puzzle Airplane", "Puzzle Airplane artefact can be used to launch a custom pool on Puzzle Swap (PuzzleSwap.org).", "https://ipfs.io/ipfs/QmNTzzdvBx658hiCVvHNGS4FsRk8ZhAgYwezH6Q9QEKy7K"], ["Puzzle Wheel", "Puzzle Wheel artefact can be used to launch a custom pool on Puzzle Swap (PuzzleSwap.org).", "https://ipfs.io/ipfs/QmTvN5sAC2ka4qtLjSd2vWQ4NqYJD8Qo8cJiChd8QjYNC5"], ["Puzzle Khalifa", "Puzzle Khalifa artefact can be used to launch a custom pool on Puzzle Swap (PuzzleSwap.org).", "https://ipfs.io/ipfs/QmckDMscnuYp8shr3NxqbeDJ82V6c1UvWP1ecPAfMkSv2D"]]
let totalCount_DataKey = "total_sold_nft"

func getRandomNumber(variants: Int, txId: ByteVector, hatchingFinishHeight: Int, offset: Int) = {
    let randomSeedBlock = value(blockInfoByHeight((hatchingFinishHeight - 1)))
    let randomHash = sha256((txId + value(randomSeedBlock.vrf)))
    (toInt(randomHash, (offset * 8)) % variants)
}

func getIntegerData(key: String) = {
    match getInteger(this, key) {
        case t: Int => t
        case _ => 0
    }
}

func isValidNFT(asset: Asset) = {
    let issuerAddress = getString(Address(nftCreationAddress), "nft_" + toBase58String(asset.id) + "_issuer")
    if (if (if ((asset.issuer == Address(nftCreationAddress)))
        then (issuerAddress == toString(this))
        else false)
        then (asset.decimals == 0)
        else false)
        then (asset.quantity == 1)
        else false
}

func isEagleHolder(address: String) = match getInteger(Address(eagleHolderAddress), address + "_staked") {
    case t: Int => (t > 0)
    case _ => false
}

func getPuzzlePrice() = {
    let usdnBalance = getIntegerValue(Address(puzzlePoolAddress), (("global_" + toBase58String(usdnAssetId)) + "_balance"))
    let puzzleBalance = getIntegerValue(Address(puzzlePoolAddress), (("global_" + toBase58String(puzzleAssetId)) + "_balance"))
    let puzzlePart = fraction(puzzleBalance, 1, 8)
    fraction(usdnBalance, 1000000, fraction(puzzlePart, 1, 100))
}

func getArtefactUsdnPrice() = (400000000 + (getIntegerData(totalCount_DataKey) * 1000000))

func deltaUsdnSum(puzzleAmount: Int, puzzlePriceUsdn: Int, isEagleHolder: Boolean) = {
    let artefactUsdnPrice = if (isEagleHolder)
        then {
            let price = 2000000000
            (price - fraction(price, 20, 100))
            }
        else 2000000000
    (puzzleAmount - artefactUsdnPrice)
}

@Callable(i)
func generateArtefact () = if (if (if ((size(i.payments) == 1))
    then (i.payments[0].assetId == puzzleAssetId)
    else false)
    then (i.payments[0].amount > 0)
    else false)
    then {
        let puzzlePriceUsdn = getPuzzlePrice()
        let paymentUsdnDelta = deltaUsdnSum(i.payments[0].amount, puzzlePriceUsdn, isEagleHolder(toString(i.caller)))
        if ((paymentUsdnDelta >= 0))
            then {
                let randIndex = getRandomNumber(5, i.transactionId, height, 0)
                if (if ((randIndex >= 0))
                    then (5 > randIndex)
                    else false)
                    then {
                        let artefact = artefacts[randIndex]
                        let createdNFTStr =                         match invoke(Address(nftCreationAddress), "createNFT", [artefact[0], artefact[1], artefact[2], "Puzzle Pool Artefact"], nil) {
                            case x: String => 
                                x
                            case _ => 
                                throw("something went wrong during creation of NFT")
                        }
                        if ((createdNFTStr == createdNFTStr))
                            then {
                                let extraTransactionList = if ((paymentUsdnDelta > 0))
                                    then [ScriptTransfer(i.caller, paymentUsdnDelta, puzzleAssetId), Burn(puzzleAssetId, (i.payments[0].amount - paymentUsdnDelta))]
                                    else [Burn(puzzleAssetId, i.payments[0].amount)]
                                (([ScriptTransfer(i.caller, 1, fromBase58String(createdNFTStr)), IntegerEntry(totalCount_DataKey, (getIntegerData(totalCount_DataKey) + 1))] ++ extraTransactionList), createdNFTStr)
                                }
                            else throw("Strict value is not equal to itself.")
                        }
                    else throw("Inalid random index.")
                }
            else throw("Not enough payment amount.")
        }
    else throw("Invalid payment. You can use only Puzzle for payment.")

@Callable(i)
func spendArtefact (poolDomain: String) = if (if ((size(i.payments) == 1))
    then (i.payments[0].amount == 1)
    else false)
    then if (if ((size(poolDomain) >= 2))
        then (13 >= size(poolDomain))
        else false)
        then {
            let nftAsset = value(assetInfo(value(i.payments[0].assetId)))
            if (isValidNFT(nftAsset))
                then {
                    let soldCountKey = (toString(i.caller) + "_sold_count")
                    let addressSoldKey = (toString(i.caller) + "_address_spend")
                    let domainPurchasedByKey = (("domain_" + poolDomain) + "_purchasedBy")
                    let domainCreatedBy = (("domain_" + poolDomain) + "_createdBy")
                    let s = valueOrErrorMessage(getString(this, domainPurchasedByKey), "Domain with this name already exists")
                    let inv = invoke(Address(nftCreationAddress), "burnNFT", nil, i.payments)
                    if ((inv == inv))
                        then [StringEntry(domainPurchasedByKey, toString(i.caller)), StringEntry(domainCreatedBy, toBase58String(nftAsset.id)), StringEntry(addressSoldKey, toBase58String(nftAsset.id)), IntegerEntry(soldCountKey, (getIntegerData(soldCountKey) + 1))]
                        else throw("Strict value is not equal to itself.")
                    }
                else throw("Invalid NFT.")
            }
        else throw("Pool domain name specified incorrectly, length must be from 2 to 13 characters")
    else throw("Invalid payment. You should use NFT for payment.")
