{-# STDLIB_VERSION 6 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}

let usdnId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
let usdnIdStr = "DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p"
let puzzleId = base58'HEB8Qaw9xrWpWs8tHsiATYGBWDBtP2S7kcPALrMu43AS'
let puzzleIdStr = "HEB8Qaw9xrWpWs8tHsiATYGBWDBtP2S7kcPALrMu43AS"

let Scale = 1000000000000

func tryGetInteger (key: String) = match getInteger(this, key) {
    case b: Int => 
        b
    case _ => 
        0
}


func tryGetString (key: String) = match getString(this, key) {
    case a: String => 
        a
    case _ => 
        ""
}

func claimAliasResult (address: Address, assetIdStr: String) = {
    let addressStr = toString(address)
    let currentInterest = tryGetInteger("global_lastCheck_" + assetIdStr + "_interest")
    let stakedAmount = tryGetInteger(addressStr + "_staked")

    let lastCheckInterestInState = tryGetInteger(addressStr + "_lastCheck_" + assetIdStr + "_interest")
    let lastCheckInterest = if (lastCheckInterestInState == 0) then {0} else {lastCheckInterestInState}
    let reward = fraction(currentInterest - lastCheckInterest, stakedAmount, Scale)
    [
        IntegerEntry(addressStr + "_lastCheck_" + assetIdStr + "_interest", currentInterest), 
        IntegerEntry(addressStr + "_" + assetIdStr + "_claimed", tryGetInteger(addressStr + "_" + assetIdStr + "_claimed") + reward), 
        ScriptTransfer(address, reward, assetIdStr.fromBase58String())]
    }



func claimResult (address: Address) = (claimAliasResult(address, usdnIdStr) ++ claimAliasResult(address, puzzleIdStr))


@Callable(i)
func stake () = {
    let amount = i.payments[0].amount
    let addressStr = toString(i.caller)

    let assetIdStr = toBase58String(usdnId)
    let totalStakedAmount = tryGetInteger("global_staked")
    if ((i.payments[0].assetId != puzzleId))
        then throw("wrong asset attached")
        else (
            claimResult(i.caller) ++ 
            [
                IntegerEntry("global_staked", (totalStakedAmount + amount)), 
                IntegerEntry((addressStr + "_staked"), (tryGetInteger((addressStr + "_staked")) + amount))
            ]
        )
}


@Callable(i)
func unStake(amount: Int) = {
    let addressStr = toString(i.caller)
    let stakedAmount = tryGetInteger((addressStr + "_staked"))
    if ((amount > stakedAmount))
        then throw("you don't have tokens available")
        else (
            claimResult(i.caller) ++ 
            [
                IntegerEntry((addressStr + "_staked"), (stakedAmount - amount)), 
                IntegerEntry("global_staked", (tryGetInteger("global_staked") - amount)), 
                ScriptTransfer(i.caller, amount, puzzleId)]
        )
}



@Callable(i)
func claimReward () = claimResult(i.caller)



@Callable(i)
func topUpReward () = {
    let pmtAsset = i.payments[0].assetId.value()
    let pmtAmount = i.payments[0].amount
    strict amount = if pmtAsset == usdnId then {
        # strict b0 = assetBalance(this, puzzleId)
        # strict inv = invoke(Address(base58'3PBHyEwmERR1CEkrTNbPj2bgyisTfPRqfee'), "exchange", [1], i.payments)
        # strict b1 = assetBalance(this, puzzleId)
        # b1 - b0
        0
    } else if pmtAsset == puzzleId then { pmtAmount }
    else {throw("not correct asset attached")}

    let currentInterest = tryGetInteger((("global_lastCheck_" + puzzleIdStr) + "_interest"))
    let totalStakedAmount = tryGetInteger("global_staked")
    let interestDelta = if ((totalStakedAmount > 0))
        then fraction(amount, Scale, totalStakedAmount)
        else 0

    if pmtAsset == puzzleId then {
    (
        [
            IntegerEntry((("global_" + puzzleIdStr) + "_earnings"), (tryGetInteger((("global_" + puzzleIdStr) + "_earnings")) + amount)), 
            IntegerEntry((("global_lastCheck_" + puzzleIdStr) + "_interest"), (currentInterest + interestDelta))
        ], amount)
    } else {
        [ScriptTransfer(Address(base58'3PFWAVKmXjfHXyzJb12jCbhP4Uhi9t4uWiD'), pmtAmount, pmtAsset)]
    }
}


@Verifier(tx)
func verify () = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
