{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}



let usdnIdStr = "DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p"
let usdnId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
let limitContract = "3PFB6LJyShsCKEA1AU1U1WLbDazqyj6ZL9b"
let tsnContract = "3PKz5jnJLohF2GjShQ7bG5H4BebdoA98zZ2"
let lendProxyContract = "3PGxMZtMnNT9pJCvXxXV4LzKqXsjvQ9XpfR"
let pzPoolsL2Wrapper = "3PQoBfUKHkJAeGWhooLP7WS8ovb54av9Jp2"

let managers = [Address(base58'3PMcMiMEs6w56NRGacksXtFG5zS7doE9fpL'), Address(base58'3PMKAL4cd77onkYuuU35115Wov1sLMEcFsv'), Address(base58'3P9xX849YJXg7C87v82cDyDy5VhKiPJpHo8'), Address(base58'3PKHFX6W4aAr1e1b8MUTz5HmdWVUcjWhgY4')]

func tryGetString(key: String) = {
  match getString(this, key) {
    case b:String => b
    case _ => ""
  }
}

func tryGetStringOther(key: String, address: Address) = {
  match getString(address, key) {
      case b:String => b
      case _ => ""
  }
}

func getAssetString(assetId: ByteVector|Unit) = {
  match assetId {
    case b:ByteVector => b.toBase58String()
    case _ => "WAVES"
  }
}

func getAssetBytes(assetIdStr: String) = {
  if (assetIdStr == "WAVES") then {unit} else {assetIdStr.fromBase58String()}
}

func getBalance(assetId: ByteVector|Unit) = {
  match assetId {
    case x: Unit => wavesBalance(this).available
    case _ => assetBalance(this, assetId.value())
  }
}

func swapWX(asset0: String, asset1: String, amount0: Int) = {
  strict asset1BalanceBefore = getBalance(asset1.getAssetBytes())
  strict inv1 = invoke(Address(base58'3P68zNiufsu1viZpu1aY3cdahRRKcvV5N93'), "swap", [1, asset1, this.toString()], [AttachedPayment(asset0.getAssetBytes(), amount0)])
  strict amount1 = getBalance(asset1.getAssetBytes()) - asset1BalanceBefore
  amount1
}

func swapLimit(params: String, t0Str: String, t1Str: String) = {
    func doLimit(asset: ByteVector|Unit, orderParams: String) = {
        let ord = orderParams.split(">")
        let (orderId, orderAmountStr) = (ord[0], ord[1])
        let _orderAmount = orderAmountStr.parseIntValue()
        strict assetBal = getBalance(asset)
        let orderAmount = if (assetBal < _orderAmount) then assetBal else _orderAmount
        strict inv = invoke(Address(limitContract.fromBase58String()),"fulfillOrder",[orderId],[AttachedPayment(asset, orderAmount)]) 
        asset
    }
    let ordersLi = params.split(":")
    let t0 = getAssetBytes(t0Str)
    strict result = FOLD<10>(ordersLi, t0, doLimit)
    0
}

func swapLend(params: String, t0Str: String, t1Str: String, amount: Int) = {
    let arr = params.split("-")
    let (pool_address, asset, dir) = (arr[0], arr[1], arr[2])
    let proxyAdr = Address(lendProxyContract.fromBase58String())
    let functionName = if (dir == "0") then {
        "mintPL"
    } else {
        "redeemPL"
    }
    invoke(proxyAdr, functionName, [0], [AttachedPayment(getAssetBytes(t0Str), amount)])
}

func swapPepe(params: String, t0Str: String, t1Str: String, amount: Int) = {
  let arr = params.split("-")
  let (pool_address, functionTag) = (arr[0], arr[1])
  let swapAddress = Address(pool_address.fromBase58String())
  if (functionTag == "d") then {
    invoke(swapAddress, "deposit", [0], [AttachedPayment(getAssetBytes(t0Str), amount)])
  } else if (functionTag == "w") then {
    invoke(swapAddress, "withdraw", [t1Str, 0], [AttachedPayment(getAssetBytes(t0Str), amount)])
  } else if (functionTag == "s") then {
    invoke(swapAddress, "swap", [t1Str, 0], [AttachedPayment(getAssetBytes(t0Str), amount)])
  } else {
    throw("Unknown function tag for pepe swap")
  }
}

func swapInternal(i: Invocation, routesStr: String, minToReceive: Int, refKey: String) = {

  let shutdown = getBoolean("shutdown").valueOrElse(false)
  if (shutdown) then {throw("shutdown")}
  else {

  func doSwap(amount: Int, swap: String) = {
    let swapLi = swap.split(",")
    let (dApp, dAppType, t0Str, t1Str) = (swapLi[0], swapLi[1], swapLi[2], swapLi[3])

    let t0 = getAssetBytes(t0Str)

    let amount0 = if( amount != 0 ) then amount else getBalance(t0)

    strict i1 = if (dAppType == "swopfi") then {
      invoke(Address(dApp.fromBase58String()),"exchange",[1],[AttachedPayment(t0, amount0)]) 
    } else if (dAppType == "puzzle") then {
      let pool = Address(dApp.fromBase58String())
      let poolTokenIdBinary = getBinary(pool, "global_poolToken_id").valueOrErrorMessage("No poolToken entry in " + dApp)
      let poolTokenIdStr = getAssetString(poolTokenIdBinary)
      if (t0Str == poolTokenIdStr) then {
        invoke(Address(pzPoolsL2Wrapper.fromBase58String()), "redeemWithOneToken", [dApp, t1Str], [AttachedPayment(t0, amount0)])
      } else if (t1Str == poolTokenIdStr) then {
        invoke(Address(pzPoolsL2Wrapper.fromBase58String()), "generateWithOneToken", [dApp], [AttachedPayment(t0, amount0)])
      } else {
        invoke(pool,"swap",[t1Str, 0],[AttachedPayment(t0, amount0)])
      }
    } else if (dAppType == "pz_ranged") then {      
      let pool = Address(dApp.fromBase58String())
      invoke(pool,"swap",[t1Str, 0],[AttachedPayment(t0, amount0)])
    } else if (dAppType == "wx") then {
      swapWX(t0Str, t1Str, amount0)
    } else if (dAppType == "limit") then {
        swapLimit(dApp, t0Str, t1Str)
    } else if (dAppType == "tsunami") then {
        invoke(Address(tsnContract.fromBase58String()), "swap", [t1Str, 0], [AttachedPayment(t0, amount0)])
    } else if (dAppType == "lend") then {
        swapLend(dApp, t0Str, t1Str, amount0)
    } else if (dAppType == "pepe") then {
        swapPepe(dApp, t0Str, t1Str, amount0)
    }
      else {
      throw("internal aggregator issue: unknow pool type")
    }

    0
  }

  func doRoute(accum: Int, route: String) = {
    let amountIn = route.split("/")[0].parseIntValue()
    let swaps = route.split("/")[1].split(";")
    strict swapsResult = FOLD<3>(swaps, amountIn, doSwap)
    accum + swapsResult
  }

  # find asset1
  let splittedRoute = routesStr.takeRight(50).split(",")
  let asset1Str =  splittedRoute[splittedRoute.size()-1]
  let asset1 = asset1Str.getAssetBytes()
  
  # make routes list
  let routes = routesStr.split_4C("|")
  
  # do swaps
  strict swaps = FOLD<4>(routes, 0, doRoute)

  # calc result amount
  let totalOut = getBalance(asset1)
  let feeAmount = fraction(totalOut, 29, 10000)
  let cleanTotalAmount = totalOut - feeAmount

  if (cleanTotalAmount < minToReceive) then {throw("amount to receive is too low. please try again with another amount or wait 1 minute. expected: " + minToReceive.toString() + ", real " + cleanTotalAmount.toString())} else

  strict usdnFee = if (asset1 == usdnId) then {
    feeAmount
  } else {
    let poolAddressStr = tryGetString("static_asset_"+asset1Str+"_puzzlePool")
    if (poolAddressStr == "") then {0} else {
      strict usdnBalanceBefore = getBalance(usdnId)
      let convertedFeeEmul = invoke(addressFromStringValue(poolAddressStr),"swapReadOnly",[asset1Str, usdnIdStr,feeAmount],[])
      if (convertedFeeEmul != 0) then {
        strict convertedFee = invoke(addressFromStringValue(poolAddressStr),"swap",[usdnIdStr,0],[AttachedPayment(asset1, feeAmount)])
        strict usdnBalanceAfter = getBalance(usdnId)
        usdnBalanceAfter - usdnBalanceBefore
      } else {
        0
      }
    }
  }

  let referralAddress = 
  if (refKey == "muna") then {Address(base58'3PGFHzVGT4NTigwCKP1NcwoXkodVZwvBuuU')}
  else if (refKey == "keeper") then {Address(base58'3PNgw6Db2TGUQbjnV7ekve6q126xBC1e7eM')} 
  else if (refKey == "tci") then {Address(base58'3P93R2GBkTGVehRPhytHr7sdxYww93jkbhm')} 
  else if (getString(this, "ref_"+refKey).valueOrElse("") != "") then {getStringValue(this, "ref_"+refKey).addressFromStringValue()}
  else {Address(base58'3PQxXXiQXpWsjDwQLYxyuoPiaLnVHjJguFo')}
  let refUsdnShare = if(refKey =="noref") then 0 else fraction(usdnFee, 2, 10)

  strict topUp = if (usdnFee != 0) then {
    invoke(Address(base58'3PKUxbZaSYfsR7wu2HaAgiirHYwAMupDrYW'),"topUpReward",[],[AttachedPayment(usdnId,usdnFee - refUsdnShare)])
  } else {
    unit
  }

  let asset0 = i.payments[0].assetId
  let amount0 = getBalance(asset0) - if( asset0 == usdnId ) then refUsdnShare else 0
  let amount1 = cleanTotalAmount - if( asset1 == usdnId ) then refUsdnShare else 0

  [
    ScriptTransfer(i.caller, amount1, asset1)
  ]
  ++
  (if( refUsdnShare != 0 ) then [ScriptTransfer(referralAddress, refUsdnShare, usdnId)] else [])
  ++
  (if( amount0 != 0 ) then [ScriptTransfer(i.caller, amount0, asset0)] else [])
  ++
  # if asset1 is not added to puzzle fee pools
  (if( usdnFee == 0 ) then [ScriptTransfer(Address(base58'3P4kBiU4wr2yV1S5gMfu3MdkVvy7kxXHsKe'), feeAmount, asset1)] else [])
  
  }
}

@Callable(i)
func swap(routesStr: String, minToReceive: Int) = {
  swapInternal(i, routesStr, minToReceive, "noref")  
}


@Callable(i)
func swapWithReferral(routesStr: String, minToReceive: Int, refKey: String) = {
  swapInternal(i, routesStr, minToReceive, refKey)
}

@Callable(i)
func addTokenPuzzlePool(assetIdStr: String, poolAddressStr: String) = {
  if (managers.indexOf(i.caller) == unit) then {throw("admin only")}
  else {
    [
      StringEntry("static_asset_"+assetIdStr+"_puzzlePool", poolAddressStr)
    ]
  }
}

@Callable(i)
func addReferralKey(refKey: String, addressStr: String) = {
  if (managers.indexOf(i.caller) == unit) then {throw("admin only")}
  else {
    [
      StringEntry("ref_"+refKey, addressStr)
    ]
  }
}

@Callable(i)
func shutdown(val: Boolean) = {
  if (managers.indexOf(i.caller) == unit) then {throw("admin only")}
  else {
    [
      BooleanEntry("shutdown", val)
    ]
  }
}



@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
